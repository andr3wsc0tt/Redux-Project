{"version":3,"sources":["components/profile.gif","store/actions/actions.ts","store/types/types.ts","components/subcomponents/NavBar.tsx","components/EditProfilePage.tsx","components/ProfilePage.tsx","components/HomePage.tsx","components/ErrorPage.tsx","App.tsx","serviceWorker.ts","store/reducers/reducers.ts","store/index.ts","index.tsx"],"names":["module","exports","logOut","profile","type","payload","NavBar","loggedOut","props","profiles","filter","loggedIn","sessionStorage","setItem","window","location","href","goto","this","Menu","stackable","className","Item","Dropdown","text","position","Input","icon","placeholder","Button","Group","color","onClick","redirect","Or","React","connect","state","EditProfilePage","handleCityChange","e","setState","city","currentTarget","value","handleCohortChange","cohort","handleSpokenChange","spoken","handleProgrammingChange","programming","handleAboutMeChange","aboutMe","handleClick","event","preventDefault","updateProfile","uName","name","handleRedirect","JSON","stringify","to","component","ProfilePage","Container","Segment","Grid","columns","Row","Column","style","marginTop","Header","as","textAlign","Form","size","stacked","fluid","iconPosition","onChange","Field","control","TextArea","label","ownProps","fields","divided","Card","Image","src","profilePic","wrapped","ui","Content","Meta","Description","extra","minHeight","Icon","Responsive","minWidth","Radio","defaultChecked","Home","handleUserChange","userName","handlePassChange","passWord","handleSignUserChange","signUpUser","handleConfirmSignPassChange","confirmSignUpPass","handleSignPassChange","signUpPass","handleOnClick","checkPass","cred","length","loginMessage","password","handleSignUp","addProfile","duplicated","forEach","i","signupMessage","id","getItem","destString","floated","width","Divider","horizontal","vertical","loading","Error","App","exact","path","ErrorPage","from","Component","Boolean","hostname","match","updateState","initialState","numUsers","update","log","parse","rootReducer","combineReducers","action","index","undefined","slice","uNameLog","indexLog","indexUpdate","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6317188c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.f45e432e.gif\";","import {\r\n  ProfileActionTypes,\r\n  ADD_PROFILE,\r\n  Profile,\r\n  CHECK_PASS,\r\n  LOG_OUT,\r\n  UPDATE_PROFILE\r\n} from \"../types/types\";\r\n\r\n\r\n// The 4 different action definitions we have. These are DEFINED in types.ts\r\nexport function addProfile(profile: Profile): ProfileActionTypes {\r\n  return {\r\n    type: ADD_PROFILE,\r\n    payload: profile\r\n  };\r\n}\r\n\r\nexport function checkPass(password: string[]): ProfileActionTypes {\r\n  return {\r\n    type: CHECK_PASS,\r\n    payload: password\r\n  };\r\n}\r\n\r\nexport function logOut(profile: Profile): ProfileActionTypes {\r\n  return {\r\n    type: LOG_OUT,\r\n    payload: profile\r\n  };\r\n}\r\n\r\nexport function updateProfile(fields: string[]) : ProfileActionTypes {\r\n    return {\r\n        type: UPDATE_PROFILE,\r\n        payload: fields\r\n    }\r\n}","export interface Profile { // Template for our Profile type\r\n  id: number;\r\n  name: string;\r\n  aboutMe: string;\r\n  password: string;\r\n  loggedIn: boolean;\r\n  city: string;\r\n  cohort:string;\r\n  spoken: string;\r\n  programming: string\r\n \r\n}\r\n\r\nexport interface ProfileState { // Template for our Profile State\r\n  profiles: Profile[];\r\n  loggedIn: boolean;\r\n  numUsers: number;\r\n}\r\n // The 4 reducers TYPES we have!\r\nexport const ADD_PROFILE = \"ADD_PROFILE\";\r\nexport const CHECK_PASS = \"CHECK_PASS\";\r\nexport const LOG_OUT = \"LOG_OUT\";\r\nexport const UPDATE_PROFILE = \"UPDATE_PROFILE\";\r\n\r\n\r\n// The templates for our reducers and their TYPE and the payload that they expect!\r\ninterface addProfile {\r\n  type: typeof ADD_PROFILE;\r\n  payload: Profile;\r\n}\r\ninterface checkPass {\r\n  type: typeof CHECK_PASS;\r\n  payload: string[];\r\n}\r\n\r\ninterface logOut {\r\n  type: typeof LOG_OUT;\r\n  payload: Profile;\r\n}\r\n\r\ninterface updateProfile {\r\n    type: typeof UPDATE_PROFILE,\r\n    payload: string[]\r\n}\r\n\r\n// export the different actions into on ActionType variable\r\nexport type ProfileActionTypes = addProfile | checkPass | logOut | updateProfile;\r\n","import * as React from 'react';\r\nimport { RootState } from \"../../store\";\r\nimport { connect } from \"react-redux\";\r\nimport { Menu, Dropdown, Input, Button } from 'semantic-ui-react';\r\nimport { Profile } from \"../../store/types/types\";\r\nimport { logOut } from \"../../store/actions/actions\";\r\nimport '../main.css';\r\n\r\nexport interface INavBarProps {\r\n    goto:string;\r\n    profiles: Profile[];\r\n    logOut: typeof logOut;\r\n    redirect : () => void\r\n}\r\n\r\nexport interface INavBarState { // our local state variables\r\n    page:string;\r\n  }\r\n  \r\n  \r\n\r\nexport class NavBar extends React.Component<INavBarProps, INavBarState> {    \r\n    loggedOut = () => { // The function that calls our logOut REDUCER!\r\n        let { logOut, profiles } = this.props; // The store states logOut REDUCER and profiles array\r\n    \r\n        let uName = profiles.filter(profile => profile.loggedIn === true); // filter through the profiles array and return any profile that has it's loggedIn field set to true.\r\n    \r\n        logOut(uName[0]); // Pass the profile to the logOut REDUCER! It takes in a Profile[] as it's payload.\r\n    \r\n        // When we log out we want to save our global state (This might not be necessary anymore)\r\n        sessionStorage.setItem(\"loggedIn\", \"false\");\r\n        sessionStorage.setItem(\"userName\", \"\"); // username of the person who is logged in\r\n        window.location.href = \"/\";\r\n      };\r\n\r\n          \r\n    public render() {\r\n       \r\n\r\n        let { goto } = this.props; // load in the profiles from the store state\r\n      \r\n        return (\r\n            <Menu stackable className=\"NavBar\">\r\n                               \r\n                <Menu.Item>\r\n                        \r\n                    <Dropdown text=\"Groups\" className =\"item1\" >\r\n                        <Dropdown.Menu>\r\n                        <Dropdown.Item text=\"Group 1\" />\r\n                        <Dropdown.Item text=\"Group 2\" />\r\n                        <Dropdown.Item text=\"Group 3\" />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n         \r\n                </Menu.Item>\r\n\r\n              <Menu.Item >\r\n                <Dropdown text=\"Class Mates\" className =\"item2\">\r\n                        <Dropdown.Menu>\r\n                        <Dropdown.Item text=\"Andrew\" />\r\n                        <Dropdown.Item text=\"Charles\" />\r\n                        <Dropdown.Item text=\"Cai\" />\r\n                        <Dropdown.Item text=\"Trina\" />\r\n                        <Dropdown.Item text=\"Mohammad\" />\r\n                        </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Menu.Item>\r\n\r\n                <Menu.Menu position=\"right\">\r\n               <Menu.Item className =\"item3\">\r\n                 \r\n                    <Input className='icon' icon='search' placeholder='Search...' />\r\n                </Menu.Item>  \r\n\r\n                <Menu.Item >\r\n                   <Button.Group className =\"item4\">\r\n                        <Button color=\"green\" onClick={this.props.redirect}>\r\n                            {goto}\r\n                        </Button>\r\n                        <Button.Or/>\r\n                        <Button color=\"yellow\" onClick={this.loggedOut}>\r\n                            Log Out\r\n                    </Button>\r\n                    </Button.Group>\r\n                </Menu.Item> \r\n                </Menu.Menu>\r\n            </Menu>\r\n           \r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: RootState) => { // mapStateToProps connects the store's initial state variables with ProfilePage component\r\n  return {\r\n    profiles: state.profile.profiles,\r\n    loggedIn: state.profile.loggedIn\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { logOut })(NavBar); // connect imports the logOut REDUCER from our store and returns our connected our ProfilePage component \r\n","import * as React from \"react\";\r\nimport { updateProfile } from \"../store/actions/actions\";\r\nimport { Link, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\nimport { logOut } from \"../store/actions/actions\";\r\nimport { Profile } from \"../store/types/types\";\r\nimport { RootState } from \"../store\";\r\nimport ProfilePage from \"./ProfilePage\";\r\nimport { connect } from \"react-redux\";\r\nimport NavBar from \"./subcomponents/NavBar\";\r\n\r\n\r\nimport {\r\n  Grid,\r\n  Header,\r\n  Form,\r\n  Segment,\r\n  TextArea,\r\n  Button,\r\n  Container\r\n\r\n} from \"semantic-ui-react\";\r\n\r\nexport interface IEditProfileState { // This holds the states of the current component that AREN'T passed as global variables. They are limited to only affecting this page.\r\n  city: string;\r\n  cohort: string;\r\n  spoken: string;\r\n  programming: string;\r\n  aboutMe: string;\r\n  redirect: boolean;\r\n}\r\n\r\nexport interface IEditProfilePageProps { // This holds the variables that are passed from the store. mapStateToProps and connect link to this interface so that we can call our reducers and view the store state.\r\n  match: any;\r\n  profiles: Profile[]; // The list of our users\r\n  logOut: typeof logOut; // A reducer\r\n  updateProfile: typeof updateProfile; // A reducer\r\n}\r\n\r\nexport class EditProfilePage extends React.Component<\r\n  IEditProfilePageProps,\r\n  IEditProfileState\r\n> {\r\n  constructor(props: IEditProfilePageProps) {\r\n    super(props);\r\n    this.state = { // initializing our local state variables (these are the blank input vales)\r\n      city: \"\",\r\n      cohort: \"\",\r\n      spoken: \"\",\r\n      programming: \"\",\r\n      aboutMe: \"\",\r\n      redirect: false\r\n    };\r\n  }\r\n\r\n  handleCityChange = (e: React.FormEvent<HTMLInputElement>) => { // update our local state variables as the user inputs the city they want to change their profile value to\r\n    this.setState({ city: e.currentTarget.value });\r\n  };\r\n  handleCohortChange = (e: React.FormEvent<HTMLInputElement>) => { // update our local state variables as the user inputs the cohort they want to change their profile value to\r\n    this.setState({ cohort: e.currentTarget.value });\r\n  };\r\n  handleSpokenChange = (e: React.FormEvent<HTMLInputElement>) => { // update our local state variables as the user inputs the spoken language they want to change their profile value to\r\n    this.setState({ spoken: e.currentTarget.value });\r\n  };\r\n  handleProgrammingChange = (e: React.FormEvent<HTMLInputElement>) => { //..etc\r\n    this.setState({ programming: e.currentTarget.value });\r\n  };\r\n  handleAboutMeChange = (e: React.FormEvent<HTMLInputElement>) => { //.etc\r\n    this.setState({ aboutMe: e.currentTarget.value });\r\n  };\r\n\r\n  handleClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => { // Our update profile function that calls the update profile REDUCER!\r\n    // this updates our users profile\r\n    event.preventDefault();\r\n\r\n    let { city, cohort, spoken, programming, aboutMe } = this.state; // these are the fields that can be updated on our edit profile page\r\n    let { updateProfile, profiles } = this.props; // updateProfile is the function imported from actions and profiles in our array of saved profiles\r\n\r\n    let uName = profiles.filter(profile => profile.loggedIn === true); // find out who user is logged in\r\n\r\n    if (uName[0].name != null) {\r\n      let update: string[] = [\r\n        uName[0].name,\r\n        city,\r\n        cohort,\r\n        spoken,\r\n        programming,\r\n        aboutMe\r\n      ];\r\n      updateProfile(update); // our update profile REDUCER!\r\n    }\r\n\r\n    this.setState({ redirect: true }); // Sets a state that tells us which page to link to\r\n  };\r\n\r\n  handleRedirect = () => {\r\n    this.setState({ redirect: true }); // Sets a state that tells us which page to link to\r\n  };\r\n\r\n  loggedOut = () => {\r\n    let { logOut, profiles } = this.props;\r\n\r\n    let uName = profiles.filter(profile => profile.loggedIn === true); // find out who user is logged in\r\n\r\n    logOut(uName[0]); // log that user out - logOut is a reducer and uName[0] is the username of the logged in user\r\n    sessionStorage.setItem(\r\n      // after changes to our store, we want to save them in our sessionStorage\r\n      \"profiles\",\r\n      JSON.stringify(profiles)\r\n    );\r\n    sessionStorage.setItem(\"loggedIn\", \"false\"); // log us out of our sessionStorage. This is still cheating a bit!\r\n    // sessionStorage.setItem(\"userName\", \"\");\r\n  };\r\n  \r\n  public render() {\r\n    let { profiles } = this.props;\r\n\r\n\r\n    let uName = profiles.filter(profile => profile.loggedIn === true); // find out who user is logged in\r\n\r\n    let { aboutMe, name, cohort, programming, spoken, city } = uName[0]; // These are our users profile fields, these are the variables that we will put into the JSX.\r\n\r\n    if (this.state.redirect === true) {\r\n      // in handleRedirect we set this state variable if we want to go to Profile Page\r\n      return (\r\n        <Router>\r\n          {/* Render the Profile Page */}\r\n          <Link to=\"\" component={ProfilePage} />\r\n\r\n          {/* Change the URL to /profile/**Logged in User** */}\r\n          <Redirect to={`/profile/${name}`} />\r\n        </Router>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n      <NavBar redirect = {this.handleRedirect} goto= \"Profile\"/>\r\n      <Container>\r\n        <Segment>\r\n       \r\n       <Grid stackable  columns=\"equal\">\r\n         \r\n       \r\n         <Grid.Row>\r\n         \r\n           <Grid.Column >\r\n    \r\n             <Container style={{marginTop: 70}} className= \"edit-profile\">\r\n               <h5>Current city:{\" \"}{city}</h5>\r\n               <h5>Cohort:{\" \"}{cohort}</h5>\r\n               <h5>Spoken languages:{\" \"}{spoken}</h5>\r\n               <h5>Programming languages interested in:{\" \"}{programming}</h5>\r\n               <h5>About Me:{\" \"}{aboutMe}</h5>\r\n             </Container>\r\n         \r\n           </Grid.Column> \r\n     \r\n           <Grid.Column>\r\n             <Header as=\"h2\" color=\"green\" textAlign=\"center\">\r\n               Edit profile\r\n             </Header>\r\n             <Form size=\"large\">\r\n               <Segment stacked>\r\n                 <Form.Input\r\n                   fluid\r\n                   icon=\"home\"\r\n                   iconPosition=\"left\"\r\n                   placeholder=\"Current City\"\r\n                   value={this.state.city}\r\n                   onChange={this.handleCityChange}\r\n                 />\r\n                 <Form.Input\r\n                   fluid\r\n                   icon=\"users\"\r\n                   iconPosition=\"left\"\r\n                   placeholder=\"Cohort\"\r\n                   type=\"text\"\r\n                   value={this.state.cohort}\r\n                   onChange={this.handleCohortChange}\r\n                 />\r\n                 <Form.Input\r\n                   fluid\r\n                   icon=\"language\"\r\n                   iconPosition=\"left\"\r\n                   placeholder=\"Spoken Languages\"\r\n                   type=\"text\"\r\n                   value={this.state.spoken}\r\n                   onChange={this.handleSpokenChange}\r\n                 />\r\n                 <Form.Input\r\n                   fluid\r\n                   icon=\"code\"\r\n                   iconPosition=\"left\"\r\n                   placeholder=\"Programming Languages\"\r\n                   type=\"text\"\r\n                   value={this.state.programming}\r\n                   onChange={this.handleProgrammingChange}\r\n                 />\r\n                 <Form.Field\r\n                   control={TextArea}\r\n                   label=\"About\"\r\n                   placeholder=\"Tell us more about you...\"\r\n                   value={this.state.aboutMe}\r\n                   onChange={this.handleAboutMeChange}\r\n                 />\r\n                 <Button onClick={this.handleClick} color=\"green\">\r\n                   Save Changes\r\n                 </Button>\r\n               </Segment>\r\n \r\n             </Form>\r\n           </Grid.Column>\r\n           <Grid.Column></Grid.Column>\r\n         </Grid.Row>\r\n       </Grid>\r\n       </Segment>\r\n     </Container>\r\n     </React.Fragment>\r\n    );     \r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState, ownProps: IEditProfilePageProps) => { // mapStateToProps brings the profile in from our initialState (defined and updated in the reducer)\r\n  return {\r\n    profiles: state.profile.profiles,\r\n    loggedIn: state.profile.loggedIn // Logged in is also brought in just in case our user logs our from this page\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { updateProfile, logOut })( // connect 'connects' this component(EditProfilePage.tsx) with our store and 'connects' the reducer functions 'updateProfile and logOut'.\r\n  EditProfilePage // This exports our connected component(EditProfilePage.tsx) with the store linked to it.\r\n);\r\n","import * as React from \"react\";\r\nimport \"./main.css\";\r\nimport { RootState } from \"../store\";\r\nimport { connect } from \"react-redux\";\r\nimport { Profile } from \"../store/types/types\";\r\nimport { logOut } from \"../store/actions/actions\";\r\nimport EditProfilePage from \"./EditProfilePage\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\n\r\nimport {\r\n  Card,\r\n  Image,\r\n  Segment,\r\n  Grid,\r\n  Container,\r\n  Header,\r\n  Radio,\r\n  Form,\r\n  TextArea,\r\n  Icon,\r\n  Button,\r\n  Responsive,\r\n} from \"semantic-ui-react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";  \r\nimport profilePic from './profile.gif'\r\nimport NavBar from \"./subcomponents/NavBar\";\r\n\r\n\r\nexport interface IProfilePageProps {\r\n  // Variables passed in from the store state\r\n  match: any;\r\n  profiles: Profile[];\r\n  logOut: typeof logOut;\r\n}\r\n\r\nexport interface IProfilePageState {\r\n  // our local state variables\r\n  redirect: boolean;\r\n}\r\n\r\nexport class ProfilePage extends React.Component<\r\n  IProfilePageProps,\r\n  IProfilePageState\r\n> {\r\n  constructor(props: IProfilePageProps) {\r\n    super(props);\r\n    this.state = { redirect: false };\r\n  }\r\n\r\n loggedOut = () => { // The function that calls our logOut REDUCER!\r\n    let { logOut, profiles } = this.props; // The store states logOut REDUCER and profiles array\r\n\r\n    let uName = profiles.filter((profile) => profile.loggedIn === true); // filter through the profiles array and return any profile that has it's loggedIn field set to true.\r\n\r\n    logOut(uName[0]); // Pass the profile to the logOut REDUCER! It takes in a Profile[] as it's payload.\r\n\r\n    // When we log out we want to save our global state (This might not be necessary anymore)\r\n    sessionStorage.setItem(\"loggedIn\", \"false\");\r\n    sessionStorage.setItem(\"userName\", \"\"); // username of the person who is logged in\r\n    window.location.href = \"/\";\r\n  };\r\n\r\n  handleRedirect = () => {\r\n    // This sets our local state variable that determines if we go to the Edit Profile Page\r\n    this.setState({ redirect: true });\r\n  };\r\n\r\n  public render() {\r\n    let { profiles } = this.props; // load in the profiles from the store state\r\n\r\n    let uName = profiles.filter((profile) => profile.loggedIn === true); // find out who user is logged in\r\n\r\n    let { aboutMe, name, cohort, programming, city, spoken } = uName[0]; // Deconstructing the current user's store profile fields\r\n\r\n    if (this.state.redirect === true) { // If we are wanting to redirect to the Edit Profile Page\r\n      return (\r\n        <Router>\r\n          {/* Render the EditProfilePage */}\r\n          <Link to=\"\" component={EditProfilePage} />\r\n\r\n          {/* Redirect the URL to /edit-profile/**name of the Logged in User** */}\r\n          <Redirect to={`/edit-profile/${name}`} />\r\n        </Router>\r\n      );\r\n    }\r\n\r\n    return (\r\n      // If there is no redirect request. Render the Profile Page\r\n      <React.Fragment>\r\n      <NavBar redirect = {this.handleRedirect} goto= \"Edit Profile\"/>\r\n      <Container>\r\n      <Segment>\r\n      \r\n      <Grid stackable divided=\"vertically\">\r\n        <Grid.Row columns={8}>\r\n          <Grid.Column>\r\n          {/* <Container>\r\n          <Image src={LOGO} size=\"large\" circular centered/>\r\n          </Container> */}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row columns={3}>\r\n          <Grid.Column>\r\n            <Card>\r\n            {/* <Responsive as={Card} minWidth={768}> */}\r\n              <Image src={profilePic} wrapped ui={false}/>\r\n              <Card.Content>\r\n               <Card.Header>{name}</Card.Header>\r\n                <Card.Meta>\r\n                  <span className=\"date\"><h5>Cohort:{\" \"}{cohort}</h5></span>\r\n                </Card.Meta>\r\n                <br></br>\r\n                <Card.Description>\r\n                <h5>Current city:{\" \"}{city}</h5>\r\n                <h5>Spoken languages:{\" \"}{spoken}</h5>\r\n                <h5>Programming languages interested in:{\" \"}{programming}</h5>\r\n                <h5>About Me:{\" \"}{aboutMe}</h5>\r\n                </Card.Description>\r\n              </Card.Content>\r\n              <Card.Content extra>\r\n                {/* <a>\r\n            <Icon name='user' />\r\n            22 Friends\r\n          </a> */}\r\n              </Card.Content>\r\n              {/* </Responsive> */}\r\n            </Card>\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <h2>Welcome {name}!</h2>\r\n            <Form>\r\n              <Segment>\r\n                <TextArea\r\n                  placeholder=\"Create a Post\"\r\n                  style={{ minHeight: 150 }}\r\n                />\r\n                <Segment>\r\n                  {\" \"}\r\n                  <Button icon>\r\n                    <Icon name=\"photo\" color=\"green\" />\r\n                    Photo\r\n                  </Button>\r\n                  <Button icon>\r\n                    <Icon name=\"user outline\" color=\"green\" />\r\n                    Tag a Class Mate\r\n                  </Button>\r\n                </Segment>\r\n              </Segment>\r\n            </Form>{\" \"}\r\n            <br></br>\r\n            <Form>\r\n              <Segment>\r\n                <TextArea\r\n                  placeholder=\"Ask a question\"\r\n                  style={{ minHeight: 150 }}\r\n                />\r\n                <Segment>\r\n                  {\" \"}\r\n                  <Button icon>\r\n                    <Icon name=\"image outline\" color=\"green\" />\r\n                    Screen Shot\r\n                  </Button>\r\n                  <Button icon>\r\n                    <Icon name=\"file code outline\" color=\"green\" />\r\n                    Group\r\n                  </Button>\r\n                </Segment>\r\n              </Segment>\r\n            </Form>\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Container>\r\n          <Responsive as={Container} minWidth={768}>\r\n            <Calendar />\r\n            </Responsive>\r\n            </Container>\r\n            <br></br>\r\n            <br></br>\r\n            <Container>\r\n                <Responsive as={Container} minWidth={768}>\r\n                  <Header as=\"h3\"> Explore </Header>\r\n                  <Radio as=\"h4\" label=\"Networking Events\" defaultChecked />\r\n                  <br></br>\r\n                  <Radio as=\"h2\" label=\"Previous Cohorts\" defaultChecked />\r\n                  <br></br>\r\n                  <Radio as=\"h2\" label=\"Groups\" defaultChecked />\r\n                  <br></br>\r\n                  <Radio\r\n                    as=\"h2\"\r\n                    label=\"Additional Resources\"\r\n                    defaultChecked\r\n                  />\r\n                  <br></br>\r\n                  <Radio as=\"h2\" label=\"Linkedin\" defaultChecked />\r\n                </Responsive>\r\n              </Container>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      </Segment>\r\n      </Container>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  // mapStateToProps connects the store's initial state variables with ProfilePage component\r\n  return {\r\n    profiles: state.profile.profiles,\r\n    loggedIn: state.profile.loggedIn,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { logOut })(ProfilePage); // connect imports the logOut REDUCER from our store and returns our connected our ProfilePage component\r\n","import * as React from \"react\";\r\nimport \"./main.css\";\r\nimport {\r\n  Divider,\r\n  Button,\r\n  Form,\r\n  Grid,\r\n  Header,\r\n  Segment,\r\n  Container,\r\n  Icon,\r\n  Responsive\r\n} from \"semantic-ui-react\";\r\n\r\nimport { checkPass, addProfile } from \"../store/actions/actions\";\r\n\r\nimport { Profile } from \"../store/types/types\";\r\nimport { RootState } from \"../store\";\r\nimport { connect } from \"react-redux\";\r\nimport { BrowserRouter as Router, Link, Redirect } from \"react-router-dom\";\r\nimport ProfilePage from \"./ProfilePage\";\r\n\r\n// our store state variables\r\nexport interface IHomeProps {\r\n  // reducer\r\n  checkPass: typeof checkPass;\r\n  // reducer\r\n  addProfile: typeof addProfile;\r\n  // our users\r\n  profiles: Profile[];\r\n  // a state variable\r\n  loggedIn: boolean;\r\n  location?: Router;\r\n}\r\n\r\n// Our local state variables that change as we input either our login and password, or our new user information.\r\nexport interface IHomeState {\r\n  // Login forms\r\n  userName: string;\r\n  passWord: string;\r\n\r\n  // Sign up form\r\n  signUpUser: string;\r\n  signUpPass: string;\r\n  confirmSignUpPass: string\r\n\r\n  // Warning messages\r\n  loginMessage: string\r\n  signupMessage: string\r\n}\r\n\r\nexport class Home extends React.Component<IHomeProps, IHomeState> {\r\n  constructor(props: IHomeProps) {\r\n    super(props);\r\n    this.state = { userName: \"\", passWord: \"\", signUpPass: \"\", signUpUser: \"\" , loginMessage: \"\", signupMessage: \"\", confirmSignUpPass: \"\"};\r\n  }\r\n\r\n  // the 4 functions (methods) below update our form fields as the user inputs them\r\n  handleUserChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({ userName: e.currentTarget.value });\r\n  };\r\n\r\n  handlePassChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({ passWord: e.currentTarget.value });\r\n  };\r\n\r\n  handleSignUserChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({ signUpUser: e.currentTarget.value });\r\n  };\r\n\r\n  handleConfirmSignPassChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({ confirmSignUpPass: e.currentTarget.value });\r\n  };\r\n\r\n  handleSignPassChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({ signUpPass: e.currentTarget.value });\r\n  };\r\n\r\n\r\n  // This is our login method that call the checkPass REDUCER!\r\n  handleOnClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    event.preventDefault();\r\n\r\n    // our local state login and password\r\n    let { userName, passWord} = this.state;\r\n    // our store variables and reducers that are passed from mapStateToProps and connect!\r\n    let { checkPass, profiles } = this.props;\r\n    // Our reducer (checkPass) takes in a string[]...so a ['username', 'password'] array\r\n    let cred: Array<string> = [userName, passWord];\r\n    // a REDUCER!\r\n\r\n    let uName = profiles.filter((profile) => profile.name === userName);\r\n\r\n    if (uName.length === 0)\r\n      this.setState({loginMessage : \"Incorrect Username or Password\"})\r\n\r\n    if (uName.length > 0 && uName[0].password !== passWord)\r\n      this.setState({loginMessage : \"Incorrect Username or Password\"})\r\n\r\n\r\n    checkPass(cred);\r\n\r\n    // Resets our local state username and password\r\n    this.setState({ userName: \"\", passWord: \"\" });\r\n  };\r\n\r\n  // our sign up function that calls our addProfile REDUCER!\r\n  handleSignUp = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    e.preventDefault();\r\n    // info put into form\r\n    let { signUpPass, signUpUser, confirmSignUpPass } = this.state;\r\n    // store variables and reducers\r\n    let { addProfile, profiles } = this.props;\r\n    // variable to check is a user by that name already exists\r\n    let duplicated: boolean = false;\r\n    // Go through each profile in the store's profiles\r\n    profiles.forEach((profile, i) => {\r\n      // Check if that profile has the same name as the text entered in the sign up field\r\n      if (profile.name === signUpUser) {\r\n        // if the text entered in the sign up field matches a name in the store's profile array, set duplicated to true (Tell the function that you found a user that already has that name)\r\n        duplicated = true;\r\n      }\r\n    });\r\n    // if you didn't find a user with the same name that was entered in the sign up input box\r\n    if (confirmSignUpPass !== signUpPass && duplicated === false){\r\n      this.setState({ signupMessage: \"Passwords don't match\" });\r\n    }\r\n    else{\r\n      if (duplicated === false) {\r\n        //add that user to the stores profile array using the addProfile REDUCER!\r\n        addProfile({\r\n          id: 2,\r\n          name: signUpUser,\r\n          password: signUpPass,\r\n          aboutMe: \"\",\r\n          loggedIn: true,\r\n          city: \"\",\r\n          cohort: \"\",\r\n          programming: \"\",\r\n          spoken: \"\"\r\n        });\r\n      }\r\n      else{\r\n        this.setState({ signupMessage: \"Username already exists\" });\r\n      }\r\n    }\r\n\r\n    // Reset the local state variables\r\n    this.setState({ signUpUser: \"\", signUpPass: \"\", confirmSignUpPass: \"\" });\r\n  };\r\n\r\n\r\n  componentDidUpdate(){\r\n    // Get the store's initial state's loggedIn variable and profile array\r\n    let { loggedIn, profiles } = this.props;\r\n    // if the store's loggedIn variable is set, or the sessionState loggedIn variable is set then we can set up our Router for moving to the appropriate page\r\n    if (loggedIn === true || sessionStorage.getItem(\"loggedIn\") === \"true\") {\r\n      // save the sessionStorage profiles (not sure if this is necessary)\r\n      sessionStorage.setItem(\"profiles\", JSON.stringify(profiles));\r\n      // save the sessionStorage username\r\n      let userName = sessionStorage.getItem(\"userName\");\r\n      // find the profile of the user that is logged in\r\n      let uName = profiles.filter(profile => profile.loggedIn === true);\r\n      // intialize null string for the Redirect Route\r\n      // If a user is logged in through the store state\r\n      if (loggedIn === true) {\r\n        // save to global\r\n        sessionStorage.setItem(\"userName\", uName[0].name);\r\n        // save to global\r\n        sessionStorage.setItem(\"loggedIn\", \"true\");\r\n        // set the destination for Redirect Route to the name of the logged in User\r\n        // if the global username is set\r\n      } else if (userName !== null) {\r\n        sessionStorage.setItem(\"userName\", userName);\r\n        // set the destination for Redirect Route to the name of the sessionStorage username\r\n      }\r\n\r\n    } else {\r\n      // save the sessionStorage profiles (not sure if this is necessary)\r\n      sessionStorage.setItem(\"profiles\", JSON.stringify(profiles));\r\n\r\n    }\r\n  }\r\n\r\n\r\n  public render() {\r\n    let { loggedIn, profiles } = this.props;\r\n    let {loginMessage, signupMessage} = this.state;\r\n    if (loggedIn === true || sessionStorage.getItem(\"loggedIn\") === \"true\") {\r\n      let uName = profiles.filter(profile => profile.loggedIn === true); // find out who user is logged in\r\n\r\n      // On first log in or sign up the sessionStorage will not have been set, so get the destString from the store's update profile\r\n      let destString = sessionStorage.getItem(\"userName\") ? sessionStorage.getItem(\"userName\") : uName[0].name;\r\n\r\n      return (\r\n        <>\r\n          <Router>\r\n            {/* Redirect to the /profile/ page with their username == destString */}\r\n            <Redirect to={`/profile/${destString}`} />\r\n\r\n            {/* Render the ProfilePage component */}\r\n            <Link to=\"\" component={ProfilePage} />\r\n          </Router>\r\n        </>\r\n      );\r\n    }\r\n\r\n    // If the user isn't logged in, render the HomePage\r\n    return (\r\n      <Segment>\r\n        <Grid stackable columns=\"equal\">\r\n          <Grid.Row>\r\n            <div className=\"thumb\">\r\n              <button>\r\n                <span>TechCareers Hive</span>\r\n              </button>\r\n            </div>\r\n            <Responsive as={Grid.Column} minWidth={768}></Responsive>\r\n\r\n            {/* <Grid.Column></Grid.Column>\r\n            <Grid.Column></Grid.Column> */}\r\n            <Grid.Column floated=\"right\" className=\"floated-dissapear\">\r\n              <br></br>\r\n              <br></br>\r\n              <Form >\r\n                <Form.Group>\r\n              <Form.Input\r\n                icon=\"user\"\r\n                iconPosition=\"left\"\r\n                className=\"login-name\"\r\n                placeholder=\"Username\"\r\n                width={5}\r\n                value={this.state.userName}\r\n                onChange={this.handleUserChange}\r\n              />\r\n              <Form.Input\r\n                icon=\"lock\"\r\n                width={5}\r\n                className=\"login-pass\"\r\n                iconPosition=\"left\"\r\n                placeholder=\"Password\"\r\n                type=\"password\"\r\n                value={this.state.passWord}\r\n                onChange={this.handlePassChange}\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                color=\"yellow\"\r\n                size=\"large\"\r\n                className=\"login-button\"\r\n                onClick={this.handleOnClick}\r\n              >\r\n                Login\r\n              </Button>\r\n              </Form.Group>\r\n              </Form>\r\n            </Grid.Column>\r\n            <span>{loginMessage}</span>\r\n          </Grid.Row>\r\n          \r\n          {/* <div id=\"animated_div\">Techcareers HIVE</div> */}\r\n          \r\n          <Divider horizontal>\r\n            {\" \"}\r\n            <div className=\"sk-wave\">\r\n              <div className=\"sk-wave-rect\">T</div>\r\n              <div className=\"sk-wave-rect\">e</div>\r\n              <div className=\"sk-wave-rect\">c</div>\r\n              <div className=\"sk-wave-rect\">h</div>\r\n              <div className=\"sk-wave-rect\">C</div>\r\n              <div className=\"sk-wave-rect\">a</div>\r\n              <div className=\"sk-wave-rect\">r</div>\r\n              <div className=\"sk-wave-rect\">e</div>\r\n              <div className=\"sk-wave-rect\">e</div>\r\n              <div className=\"sk-wave-rect\">r</div>\r\n              <div className=\"sk-wave-rect\">s</div>\r\n              <div className=\"sk-wave-rect\">H</div>\r\n              <div className=\"sk-wave-rect\">I</div>\r\n              <div className=\"sk-wave-rect\">V</div>\r\n              <div className=\"sk-wave-rect\">E</div>\r\n            </div>\r\n          </Divider>\r\n          <Grid.Row>\r\n          <Responsive as={Grid.Column} minWidth={768}>\r\n            {/* <Grid.Column> */}\r\n              <Container fluid>\r\n                <Header as=\"h2\">TECHCareers Hive</Header>\r\n                <br></br>\r\n                <p>Connect with classmates and techcareers alumni.</p>\r\n                <p>Join groups of your interest.</p>\r\n                <p>Check networking events.</p>\r\n                <p>AND More!!!!!!!.</p>\r\n              </Container>\r\n              </Responsive>\r\n            {/* </Grid.Column> */}\r\n            <Grid.Column>\r\n              {\" \"}\r\n              <Divider vertical>\r\n                {\" \"}\r\n                <Icon\r\n                  loading\r\n                  name=\"forumbee\"\r\n                  size=\"massive\"\r\n                  color=\"yellow\"\r\n                />{\" \"}\r\n              </Divider>\r\n            </Grid.Column>\r\n            \r\n            <Grid.Column>\r\n              <Header as=\"h2\" color=\"green\" textAlign=\"center\">\r\n                Sign -Up\r\n              </Header>\r\n              <span>{signupMessage}</span>\r\n              <Form size=\"large\">\r\n                <Segment stacked>\r\n                  <Form.Input\r\n                    fluid\r\n                    icon=\"user\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"username\"\r\n                    value={this.state.signUpUser}\r\n                    onChange={this.handleSignUserChange}\r\n                  />\r\n\r\n                  <Form.Input\r\n                    fluid\r\n                    icon=\"lock\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"Password\"\r\n                    type=\"password\"\r\n                    value={this.state.confirmSignUpPass}\r\n                    onChange={this.handleConfirmSignPassChange}\r\n                  />\r\n                  <Form.Input\r\n                    fluid\r\n                    icon=\"lock\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"confirm-Password\"\r\n                    type=\"password\"\r\n                    value={this.state.signUpPass}\r\n                    onChange={this.handleSignPassChange}\r\n                  />\r\n                  <Button\r\n                    color=\"green\"\r\n                    fluid\r\n                    size=\"large\"\r\n                    onClick={this.handleSignUp}\r\n                  >\r\n                    SignUp\r\n                  </Button>\r\n                </Segment>\r\n              </Form>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Segment>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n// mapStateToProps connects our store with this component\r\nconst mapStateToProps = (state: RootState, ownProps: IHomeProps) => {\r\n  return {\r\n    profiles: state.profile.profiles,\r\n    loggedIn: state.profile.loggedIn\r\n  };\r\n};\r\n\r\n// connect loads in the checkPass and addProfile REDUCERS!. It also exports our Component with the store connected\r\nexport default connect(mapStateToProps, { checkPass, addProfile })(Home);\r\n","import * as React from \"react\";\r\n\r\nexport interface IErrorProps {}\r\n\r\nexport default class Error extends React.Component<IErrorProps> {\r\n  public render() {\r\n    return <h2>Error Page!!!</h2>;\r\n  }\r\n}\r\n","import React, {Fragment} from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport Home from \"./components/HomePage\";\r\nimport EditProfilePage from \"./components/EditProfilePage\";\r\nimport ProfilePage from \"./components/ProfilePage\";\r\nimport ErrorPage from \"./components/ErrorPage\";\r\nimport { Profile } from \"./store/types/types\";\r\nimport { RootState } from \"./store\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport interface IAppProps {\r\n  loggedIn: boolean;\r\n  profiles: Profile[];\r\n}\r\n\r\nexport class App extends React.Component<IAppProps> {\r\n  public render() {\r\n\r\n    if (sessionStorage.getItem(\"loggedIn\") === 'true') { // check session Storage to see if the global logged in variable is set. This variable is changed in ProfilePage.tsx in loggedOut(), in HomePage.tsx within the render()  fucntion\r\n\r\n      return ( // if you're logged in, switch through the paths in the order shown below. There should be a reroute to the profile page if you manually enter the homepage url.\r\n        <>\r\n          <Router>\r\n            \r\n            <Fragment>  \r\n                  <Switch>\r\n                    <Route exact path=\"/\" component={Home} />\r\n                    <Route path=\"/profile\" component={ProfilePage}/>\r\n                    <Route path=\"/edit-profile/\" component={EditProfilePage} />\r\n                    <Route component={ErrorPage} />\r\n                  </Switch>\r\n            </Fragment>\r\n                               \r\n            \r\n           \r\n          </Router>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return ( // If you're not logged in you're be routed to the Home page ('/') or to the error page if you try to access any other URL other than '/'\r\n      <>\r\n        <Router>\r\n          <Switch>\r\n            <Route>\r\n              <Redirect from=\"/*\" to=\"/\"/>\r\n              <Route exact path=\"/\" component={Home}/>\r\n            </Route>\r\n            <Route component={ErrorPage} />\r\n          </Switch>\r\n        </Router>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  return {\r\n    loggedIn: state.profile.loggedIn,\r\n    profiles: state.profile.profiles\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n  ProfileState,\r\n  ADD_PROFILE,\r\n  ProfileActionTypes,\r\n  CHECK_PASS,\r\n  LOG_OUT,\r\n  UPDATE_PROFILE,\r\n  Profile\r\n} from \"../types/types\";\r\n\r\nlet initialState: ProfileState = {\r\n  // Our base initial state - We have 2 profiles with their fields, a loggedIn state set initially to false, and the number of users numUsers after we add another profile.\r\n  profiles: [\r\n    {\r\n      id: 0,\r\n      name: \"\",\r\n      aboutMe: \"\",\r\n      password:\"10293uj1o4nn,xv9c092304jlkmxldk09fd4\",\r\n      loggedIn:false,\r\n      city: \"\",\r\n      cohort: \"\",\r\n      programming: \"\",\r\n      spoken: \"\"\r\n    },\r\n    {\r\n      id: 1,\r\n      name: \"Andrew\",\r\n      aboutMe: \"I'm Andrew\",\r\n      password: \"password\",\r\n      loggedIn: false,\r\n      city: \"\",\r\n      cohort: \"\",\r\n      programming: \"\",\r\n      spoken: \"\"\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Mo\",\r\n      aboutMe: \"I'm Mo\",\r\n      password: \"pass\",\r\n      loggedIn: false,\r\n      city: \"\",\r\n      cohort: \"\",\r\n      programming: \"\",\r\n      spoken: \"\"\r\n    },\r\n\r\n    {\r\n      id: 3,\r\n      name: \"Cailenys\",\r\n      aboutMe: \"I'm Cailenys\",\r\n      password: \"12345\",\r\n      loggedIn: false,\r\n      city: \"\",\r\n      cohort: \"\",\r\n      programming: \"\",\r\n      spoken: \"\"\r\n    }\r\n\r\n  ],\r\n  loggedIn: false,\r\n  numUsers: 4\r\n};\r\n\r\n// The following 6 lines keep our state in a global sessionStorage just in case someone refreshes a page, or manually enters a URL\r\nlet update = sessionStorage.getItem(\"profiles\");\r\nlet log = sessionStorage.getItem(\"loggedIn\");\r\n\r\nlet updateState: Profile[];\r\nif (update !== null) {\r\n  updateState = JSON.parse(update);\r\n  initialState = {\r\n    profiles: updateState,\r\n    loggedIn: (log === 'true'),\r\n    numUsers: updateState.length + 1\r\n  };\r\n}\r\n\r\n// Our REDUCER!\r\nexport function profileReducer(\r\n  state = initialState, // Our initial state is pushed\r\n  action: ProfileActionTypes\r\n): ProfileState {\r\n  switch (action.type) {\r\n    // The addProfile reducer\r\n    case ADD_PROFILE:\r\n      action.payload.id = state.numUsers; // If you're adding a new profile, get the number of users so far and set the profile id to that numUsers\r\n\r\n      return {\r\n        ...state,\r\n        loggedIn: true, // change the loggedIn state to true\r\n        profiles: [...state.profiles, action.payload], // push the action.payload (Which is a profile) onto the profile array of the \"store State / (initialState)\"\"\r\n        numUsers: ++state.numUsers // Increase the stores number of users variable\r\n      };\r\n\r\n    //The checkPass reducer\r\n    case CHECK_PASS:\r\n      let cred = state.loggedIn; // Get the loggedIn state\r\n      let index = 0; // initialize a variable that will tell us what the index of the logged in user is.\r\n\r\n      let uName = state.profiles.filter( // store the profile of the user that matches the action.payload[0] which is the username in cred [username, password]\r\n        profile => profile.name === action.payload[0]\r\n      );\r\n\r\n      if (uName[0] !== undefined) { // if there was a match\r\n        state.profiles.forEach((profile, i) => { // iterate through each profile\r\n          if (profile.name === uName[0].name) { // until we find the name of that user\r\n            index = i; // and store the index of that profile\r\n          }\r\n        });\r\n      } else // if there was no match\r\n        return { // don't make any changes\r\n          ...state\r\n        };\r\n\r\n      if (uName.length) { // if there was a match\r\n        if (uName[0].password === action.payload[1]) { // check if the users password matches the password the user entered\r\n          cred = true; // set cred = true\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        loggedIn: cred, // loggedIn = true or false depending on the match or not\r\n        profiles: [ // push all the unpacked and changed below into the stores profile\r\n          ...state.profiles.slice(0, index), // unpack the profiles up until the users index\r\n          { ...state.profiles[index], loggedIn: cred }, // update the users profile:loggedIn field as either true or false\r\n          ...state.profiles.slice(index + 1) // unpack the profiles after the users index\r\n        ]\r\n      };\r\n\r\n    // the logOut REDUCER!\r\n    case LOG_OUT:\r\n      let uNameLog = state.profiles.filter( // find the name of the user that is loggedIn\r\n        profile => profile.name === action.payload.name \r\n      );\r\n      let indexLog = 0; \r\n      state.profiles.forEach((profile, i) => { // find the index of the users profile \r\n        if (profile.name === uNameLog[0].name) {\r\n          indexLog = i;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        loggedIn: false, // set stores loggedIn as false\r\n        profiles: [ // push all the unpacked store profiles into the stores profile array\r\n          ...state.profiles.slice(0, indexLog),\r\n          { ...state.profiles[indexLog], loggedIn: false }, // set the loggedIn field of the selected users profile\r\n          ...state.profiles.slice(indexLog + 1)\r\n        ]\r\n      };\r\n    \r\n    \r\n      // the updateProfile REDUCER!\r\n    case UPDATE_PROFILE:\r\n      let name = state.profiles.filter(\r\n        profile => profile.name === action.payload[0] // match the profile with the action.payload[0] (username)\r\n      );\r\n      let indexUpdate = 0;\r\n      state.profiles.forEach((profile, i) => {\r\n        if (profile.name === name[0].name) { // find the index of the user who's name matches the payload\r\n          indexUpdate = i;\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        profiles: [\r\n          ...state.profiles.slice(0, indexUpdate), // unpack the states before the chosen user's profile index\r\n          {\r\n            ...state.profiles[indexUpdate], // Update all the changable fields for the user (This can have more functionality where you don't change ones that are empty!)\r\n\r\n            city: action.payload[1] === \"\" ? state.profiles[indexUpdate].city : action.payload[1],\r\n            cohort: action.payload[2] === \"\" ? state.profiles[indexUpdate].cohort : action.payload[2],\r\n            spoken: action.payload[3] === \"\" ? state.profiles[indexUpdate].spoken : action.payload[3],\r\n            programming: action.payload[4] === \"\" ? state.profiles[indexUpdate].programming : action.payload[4],\r\n            aboutMe: action.payload[5] === \"\" ? state.profiles[indexUpdate].aboutMe : action.payload[5],\r\n          },\r\n          ...state.profiles.slice(indexUpdate + 1)\r\n        ]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers, createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { profileReducer } from \"./reducers/reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n  profile: profileReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware())\r\n  );\r\n  return store;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"./store\";\r\n\r\nconst store = configureStore;\r\n\r\nReactDOM.render(\r\n  <Provider store={store()}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}